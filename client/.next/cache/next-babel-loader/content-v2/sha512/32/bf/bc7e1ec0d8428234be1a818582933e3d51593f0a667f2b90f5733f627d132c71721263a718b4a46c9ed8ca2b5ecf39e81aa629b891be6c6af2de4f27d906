{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\micro-ticketing\\\\client\\\\pages\\\\orders\\\\[orderId].js\";\nimport { useState, useEffect } from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport useRequest from \"../../hooks/use-request\";\n\nconst OrderShow = ({\n  order,\n  currentUser\n}) => {\n  const {\n    0: timeLeft,\n    1: setTimeLeft\n  } = useState(0);\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: '/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: payment => console.log(payment)\n  });\n  useEffect(() => {\n    const findTimeLeft = () => {\n      const msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    const timerId = setInterval(findTimeLeft, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [order]);\n\n  if (timeLeft < 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Order Expired\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Time left to pay: \", timeLeft, \" seconds\", /*#__PURE__*/_jsxDEV(StripeCheckout, {\n      token: ({\n        id\n      }) => doRequest({\n        token: id\n      }),\n      stripeKey: \"pk_test_51IJINgBbgYbfnANL2KFowjtOIGyAZO8XCQbJFw36EdVXok7Mr0YAamRUWkMjYYPkOVJibY4z64FvMLwy5LHZN71v00B5JvGVzB\",\n      amount: order.ticket.price,\n      email: currentUser.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\nOrderShow.getInitialProps = async (context, client) => {\n  const {\n    orderId\n  } = context.query;\n  const {\n    data\n  } = await client.get(`/api/orders/${orderId}`);\n  return {\n    order: data\n  };\n};\n\nexport default OrderShow;","map":{"version":3,"sources":["C:/xampp/htdocs/micro-ticketing/client/pages/orders/[orderId].js"],"names":["useState","useEffect","StripeCheckout","useRequest","OrderShow","order","currentUser","timeLeft","setTimeLeft","doRequest","errors","url","method","body","orderId","id","onSuccess","payment","console","log","findTimeLeft","msLeft","Date","expiresAt","Math","round","timerId","setInterval","clearInterval","token","ticket","price","email","getInitialProps","context","client","query","data","get"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AAC1C,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM;AAAES,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAwBP,UAAU,CAAC;AACrCQ,IAAAA,GAAG,EAAE,eADgC;AAErCC,IAAAA,MAAM,EAAE,MAF6B;AAGrCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,OAAO,EAAET,KAAK,CAACU;AADb,KAH+B;AAMrCC,IAAAA,SAAS,EAAGC,OAAD,IAAaC,OAAO,CAACC,GAAR,CAAYF,OAAZ;AANa,GAAD,CAAxC;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,YAAY,GAAG,MAAM;AACvB,YAAMC,MAAM,GAAG,IAAIC,IAAJ,CAASjB,KAAK,CAACkB,SAAf,IAA4B,IAAID,IAAJ,EAA3C;AACAd,MAAAA,WAAW,CAACgB,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,IAApB,CAAD,CAAX;AACH,KAHD;;AAKAD,IAAAA,YAAY;AACZ,UAAMM,OAAO,GAAGC,WAAW,CAACP,YAAD,EAAe,IAAf,CAA3B;AAEA,WAAO,MAAM;AACTQ,MAAAA,aAAa,CAACF,OAAD,CAAb;AACH,KAFD;AAGH,GAZQ,EAYN,CAACrB,KAAD,CAZM,CAAT;;AAcA,MAAIE,QAAQ,GAAG,CAAf,EAAkB;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,qCACuBA,QADvB,2BAEI,QAAC,cAAD;AACI,MAAA,KAAK,EAAE,CAAC;AAAEQ,QAAAA;AAAF,OAAD,KAAYN,SAAS,CAAC;AAAEoB,QAAAA,KAAK,EAAEd;AAAT,OAAD,CADhC;AAEI,MAAA,SAAS,EAAC,6GAFd;AAGI,MAAA,MAAM,EAAEV,KAAK,CAACyB,MAAN,CAAaC,KAHzB;AAII,MAAA,KAAK,EAAEzB,WAAW,CAAC0B;AAJvB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAxCD;;AA0CA5B,SAAS,CAAC6B,eAAV,GAA4B,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACnD,QAAM;AAAErB,IAAAA;AAAF,MAAcoB,OAAO,CAACE,KAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMF,MAAM,CAACG,GAAP,CAAY,eAAcxB,OAAQ,EAAlC,CAAvB;AAEA,SAAO;AAAET,IAAAA,KAAK,EAAEgC;AAAT,GAAP;AACH,CALD;;AAOA,eAAejC,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport useRequest from \"../../hooks/use-request\";\r\n\r\nconst OrderShow = ({ order, currentUser }) => {\r\n    const [timeLeft, setTimeLeft] = useState(0);\r\n    const { doRequest, errors } = useRequest({\r\n        url: '/api/payments',\r\n        method: 'post',\r\n        body: {\r\n            orderId: order.id\r\n        },\r\n        onSuccess: (payment) => console.log(payment)\r\n    });\r\n\r\n    useEffect(() => {\r\n        const findTimeLeft = () => {\r\n            const msLeft = new Date(order.expiresAt) - new Date();\r\n            setTimeLeft(Math.round(msLeft / 1000));\r\n        };\r\n\r\n        findTimeLeft();\r\n        const timerId = setInterval(findTimeLeft, 1000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        };\r\n    }, [order]);\r\n\r\n    if (timeLeft < 0) {\r\n        return <div>Order Expired</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Time left to pay: {timeLeft} seconds\r\n            <StripeCheckout \r\n                token={({ id }) => doRequest({ token: id })}\r\n                stripeKey=\"pk_test_51IJINgBbgYbfnANL2KFowjtOIGyAZO8XCQbJFw36EdVXok7Mr0YAamRUWkMjYYPkOVJibY4z64FvMLwy5LHZN71v00B5JvGVzB\"\r\n                amount={order.ticket.price}\r\n                email={currentUser.email}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nOrderShow.getInitialProps = async (context, client) => {\r\n    const { orderId } = context.query;\r\n    const { data } = await client.get(`/api/orders/${orderId}`);\r\n\r\n    return { order: data };\r\n};\r\n\r\nexport default OrderShow;"]},"metadata":{},"sourceType":"module"}