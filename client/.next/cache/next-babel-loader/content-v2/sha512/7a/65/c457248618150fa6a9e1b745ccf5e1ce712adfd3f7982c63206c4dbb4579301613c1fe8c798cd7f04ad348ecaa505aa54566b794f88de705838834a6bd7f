{"ast":null,"code":"import _regeneratorRuntime from \"C:/xampp/htdocs/micro-ticketing/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/xampp/htdocs/micro-ticketing/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\micro-ticketing\\\\client\\\\pages\\\\orders\\\\[orderId].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport useRequest from \"../../hooks/use-request\";\n\nvar OrderShow = function OrderShow(_ref) {\n  _s();\n\n  var order = _ref.order,\n      currentUser = _ref.currentUser;\n\n  var _useState = useState(0),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  var _useRequest = useRequest({\n    url: '/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: function onSuccess(payment) {\n      return console.log(payment);\n    }\n  }),\n      doRequest = _useRequest.doRequest,\n      errors = _useRequest.errors;\n\n  useEffect(function () {\n    var findTimeLeft = function findTimeLeft() {\n      var msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    var timerId = setInterval(findTimeLeft, 1000);\n    return function () {\n      clearInterval(timerId);\n    };\n  }, [order]);\n\n  if (timeLeft < 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Order Expired\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Time left to pay: \", timeLeft, \" seconds\", /*#__PURE__*/_jsxDEV(StripeCheckout, {\n      token: function token(_ref2) {\n        var id = _ref2.id;\n        return doRequest({\n          token: id\n        });\n      },\n      stripeKey: \"pk_test_51IJINgBbgYbfnANL2KFowjtOIGyAZO8XCQbJFw36EdVXok7Mr0YAamRUWkMjYYPkOVJibY4z64FvMLwy5LHZN71v00B5JvGVzB\",\n      amount: order.ticket.price,\n      email: currentUser.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, _this), errors]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(OrderShow, \"QGZBB91clUCwFVko1NQLCQvgTuU=\", false, function () {\n  return [useRequest];\n});\n\n_c = OrderShow;\n\nOrderShow.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, client) {\n    var orderId, _yield$client$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            orderId = context.query.orderId;\n            _context.next = 3;\n            return client.get(\"/api/orders/\".concat(orderId));\n\n          case 3:\n            _yield$client$get = _context.sent;\n            data = _yield$client$get.data;\n            return _context.abrupt(\"return\", {\n              order: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default OrderShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderShow\");","map":{"version":3,"sources":["C:/xampp/htdocs/micro-ticketing/client/pages/orders/[orderId].js"],"names":["useState","useEffect","StripeCheckout","useRequest","OrderShow","order","currentUser","timeLeft","setTimeLeft","url","method","body","orderId","id","onSuccess","payment","console","log","doRequest","errors","findTimeLeft","msLeft","Date","expiresAt","Math","round","timerId","setInterval","clearInterval","token","ticket","price","email","getInitialProps","context","client","query","get","data"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA4B;AAAA;;AAAA,MAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACVN,QAAQ,CAAC,CAAD,CADE;AAAA,MACnCO,QADmC;AAAA,MACzBC,WADyB;;AAAA,oBAEZL,UAAU,CAAC;AACrCM,IAAAA,GAAG,EAAE,eADgC;AAErCC,IAAAA,MAAM,EAAE,MAF6B;AAGrCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,OAAO,EAAEP,KAAK,CAACQ;AADb,KAH+B;AAMrCC,IAAAA,SAAS,EAAE,mBAACC,OAAD;AAAA,aAAaC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAb;AAAA;AAN0B,GAAD,CAFE;AAAA,MAElCG,SAFkC,eAElCA,SAFkC;AAAA,MAEvBC,MAFuB,eAEvBA,MAFuB;;AAW1ClB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMmB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,UAAMC,MAAM,GAAG,IAAIC,IAAJ,CAASjB,KAAK,CAACkB,SAAf,IAA4B,IAAID,IAAJ,EAA3C;AACAd,MAAAA,WAAW,CAACgB,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,IAApB,CAAD,CAAX;AACH,KAHD;;AAKAD,IAAAA,YAAY;AACZ,QAAMM,OAAO,GAAGC,WAAW,CAACP,YAAD,EAAe,IAAf,CAA3B;AAEA,WAAO,YAAM;AACTQ,MAAAA,aAAa,CAACF,OAAD,CAAb;AACH,KAFD;AAGH,GAZQ,EAYN,CAACrB,KAAD,CAZM,CAAT;;AAcA,MAAIE,QAAQ,GAAG,CAAf,EAAkB;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH;;AAED,sBACI;AAAA,qCACuBA,QADvB,2BAEI,QAAC,cAAD;AACI,MAAA,KAAK,EAAE;AAAA,YAAGM,EAAH,SAAGA,EAAH;AAAA,eAAYK,SAAS,CAAC;AAAEW,UAAAA,KAAK,EAAEhB;AAAT,SAAD,CAArB;AAAA,OADX;AAEI,MAAA,SAAS,EAAC,6GAFd;AAGI,MAAA,MAAM,EAAER,KAAK,CAACyB,MAAN,CAAaC,KAHzB;AAII,MAAA,KAAK,EAAEzB,WAAW,CAAC0B;AAJvB;AAAA;AAAA;AAAA;AAAA,aAFJ,EAQKb,MARL;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAYH,CAzCD;;GAAMf,S;UAE4BD,U;;;KAF5BC,S;;AA2CNA,SAAS,CAAC6B,eAAV;AAAA,uEAA4B,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBvB,YAAAA,OADgB,GACJsB,OAAO,CAACE,KADJ,CAChBxB,OADgB;AAAA;AAAA,mBAEDuB,MAAM,CAACE,GAAP,uBAA0BzB,OAA1B,EAFC;;AAAA;AAAA;AAEhB0B,YAAAA,IAFgB,qBAEhBA,IAFgB;AAAA,6CAIjB;AAAEjC,cAAAA,KAAK,EAAEiC;AAAT,aAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAelC,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport useRequest from \"../../hooks/use-request\";\r\n\r\nconst OrderShow = ({ order, currentUser }) => {\r\n    const [timeLeft, setTimeLeft] = useState(0);\r\n    const { doRequest, errors } = useRequest({\r\n        url: '/api/payments',\r\n        method: 'post',\r\n        body: {\r\n            orderId: order.id\r\n        },\r\n        onSuccess: (payment) => console.log(payment)\r\n    });\r\n\r\n    useEffect(() => {\r\n        const findTimeLeft = () => {\r\n            const msLeft = new Date(order.expiresAt) - new Date();\r\n            setTimeLeft(Math.round(msLeft / 1000));\r\n        };\r\n\r\n        findTimeLeft();\r\n        const timerId = setInterval(findTimeLeft, 1000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        };\r\n    }, [order]);\r\n\r\n    if (timeLeft < 0) {\r\n        return <div>Order Expired</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Time left to pay: {timeLeft} seconds\r\n            <StripeCheckout \r\n                token={({ id }) => doRequest({ token: id })}\r\n                stripeKey=\"pk_test_51IJINgBbgYbfnANL2KFowjtOIGyAZO8XCQbJFw36EdVXok7Mr0YAamRUWkMjYYPkOVJibY4z64FvMLwy5LHZN71v00B5JvGVzB\"\r\n                amount={order.ticket.price}\r\n                email={currentUser.email}\r\n            />\r\n            {errors}\r\n        </div>\r\n    );\r\n};\r\n\r\nOrderShow.getInitialProps = async (context, client) => {\r\n    const { orderId } = context.query;\r\n    const { data } = await client.get(`/api/orders/${orderId}`);\r\n\r\n    return { order: data };\r\n};\r\n\r\nexport default OrderShow;"]},"metadata":{},"sourceType":"module"}